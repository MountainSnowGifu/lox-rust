// List: used in AST for lists of statements. We have to hand-craft
// this as Lox doesn't have a built-in list or array type. (Also used
// as a stack in the resolver.)

class ListNode {
  init(value) {
    this.value = value;
    this.next = nil;
    this.previous = nil;
  }
}

class List {
  init() {
    this.head = nil;
    this.tail = nil;
    this._length = 0;
  }

  // Append value to the end of the list.
  append(value) {
    var node = ListNode(value);
    if (this.head == nil) {
      this.head = node;
      this.tail = node;
    } else {
      node.previous = this.tail;
      this.tail.next = node;
      this.tail = node;
    }
    this._length = this._length + 1;
    return this;
  }

  // Pop the last value off the list and return it. Do nothing if
  // list if empty;
  pop() {
    if (this.tail == nil) {
      return;
    }
    var node = this.tail;
    var previous = node.previous;
    this.tail = previous;
    if (previous != nil) {
      previous.next = nil;
    } else {
      this.head = nil;
    }
    this._length = this._length - 1;
    return node.value;
  }

  // Call f(value) for each value in the list, from first value
  // appended to last. If f returns a truthy value, stop iterating.
  foreach(f) {
    var node = this.head;
    while (node != nil) {
      if (f(node.value)) {
        return;
      }
      node = node.next;
    }
  }

  // Get the nth (0-based) element of the list. Because it's a linked
  // list (Lox doesn't have arrays), this is an O(n) operation.
  get(n) {
    var node = this.head;
    var i = 0;
    while (node != nil) {
      if (i == n) {
        return node.value;
      }
      node = node.next;
      i = i + 1;
    }
    return nil;
  }

  // Return the length of the list. The length is tracked as the list
  // is appended to, so this is an O(1) operation.
  length() {
    return this._length;
  }

  // Return the last element, or nil if list if empty.
  last() {
    if (this.tail != nil) {
      return this.tail.value;
    }
    return nil;
  }
}

// Map: a key-value map, implemented as a linked list because Lox
// doesn't support indexable arrays or maps. This means
// (unfortunately) that get and set are O(N) operations.

class MapItem {
  init(key, value) {
    this.key = key;
    this.value = value;
  }
}

class Map {
  init() {
    this.items = List();
  }

  // Look for given key in map, return MapItem or nil.
  find(key) {
    var found;
    fun findItem(item) {
      if (item.key == key) {
        found = item;
        // Exit foreach loop early after finding it
        return true;
      }
      return false;
    }
    this.items.foreach(findItem);
    return found;
  }

  // Look for given key in map, return value or nil.
  get(key) {
    var item = this.find(key);
    if (item != nil) {
      return item.value;
    }
    return nil;
  }

  // Set given key to value in map. Overwrite if an item with the
  // given key already exists.
  set(key, value) {
    var item = this.find(key);
    if (item != nil) {
      item.value = value;
    } else {
      this.items.append(MapItem(key, value));
    }
  }
}


var arguments = List();
arguments.append(1);
//print arguments.pop();
print arguments.get(0);

if (1=1) {
print "a";
}else if (1=1){
print "b";
}else{
print "c";
}